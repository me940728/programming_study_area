package designPatterns.builderPattern;
/* 2장
객체를 만들어야 할 때와 만들지 말아야 할 때 구분하는 방법과 올바른 생성에 대한 예시
* */
// 생성자 대신에 정적팩터리 메서드를 고려하라
/* 정적팩터리 메서드(디자인 패턴과 다른 개념임) : 정적팩터리 메서드를 사용하면 이름을 가질 수 있다.
장점1 => 생성자를 사용하게 되면 클래스 이름만을 가지지만 정적팩터리 메서드를 사용하면 다양한 이름을 통해
넘기는 값이나 반환값등의 특징을 쉽게 묘사할 수 있다.
장점2=> 호출될 때 마다 인스턴스를 생성하지 않아도 된다. claasName.staticFactoryMethod 식으로 한번
인스턴스 생성후 메서드를 호출해서 사용하면 되기 때문이다.(플라이웨이트패턴과 비슷) 이러한 행동을
Instance-Controlled(인스턴스 통제)라고 한다. 이러한 통제를 하면 차후 싱글톤이나, 인스턴스 불가로
만들 수 있기 때문이다.
장점3 => 반활할 객체의 클래스를 자유롭게 선택할 수 있는 유연성을 제공한다. API 를 만들때 이 유연성을 응용하면
구현클래스를 공개하지 않고도 그 객체를 반환할 수 있어 API 를 작게 유지할 수 있다. 이는 인터페이스의 정적팩터리메서드를
활용한 반환타입으로 사용하는 인터페이스 기반 프레임워크를 만드는 핵심 기술이다. (원래는 인터페이스는 정적메서드를 가질 수 없으나 8버전 이상부터는 가능)
장점4 => 입력 매개변수에 따라 매번 다른 메서드를 반환할 수 있다.
장점5 => 정적팩토리메서드를 작성하는 시점에 반활할 객체의 클래스가 존재하지 않아도 된다.(JDBC 가 대표적)
------------------------------------------------------------------------------------------------------------------
단점 => 상속을 하려면 public 이나 protected 생성자가 필요함으로 정적팩토리메서드만 제공하면 하위클래스를 만들 수 없다, 프로그래머가
정적팩터리메서드를 찾기 힘들다(생성자처럼 JavaDoc 에 API 설명이 들어나지 않기 때문)
*/
/* {메서드 이름 규칙}
from : 매개변수 하나 받아서 해당 타입 인스턴스 반환하는 형변환 메서드
of : 여러 매개변수를 받아 적합한 타입 인스턴스 반환하는 메서드
valueOf : from 과 of 의 자세한 버전
 */
public class StaticFactoryMethod {
    public void StaticFactoryMethod(){ // 기존의 사용자 정의 생성자

    }
    // 정적팩터리 메서드
    static int from(String str){
        int res = Integer.parseInt(str);
        return res;
    }
    public static void main(String[] args){
        StaticFactoryMethod ins = new StaticFactoryMethod();
        String str = "2";
        int temp = ins.from(str);
        System.out.println(temp);
    }
}
